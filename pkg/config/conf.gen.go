// Code generated by baton-sdk. DO NOT EDIT!!!
package config

import "reflect" 

type Salesforce struct {
	InstanceUrl string `mapstructure:"instance-url"`
	UserUsernameForEmail bool `mapstructure:"user-username-for-email"`
	SalesforceUsername string `mapstructure:"salesforce-username"`
	SalesforcePassword string `mapstructure:"salesforce-password"`
	SecurityToken string `mapstructure:"security-token"`
	SyncConnectedApps bool `mapstructure:"sync-connected-apps"`
	SyncDeactivatedUsers bool `mapstructure:"sync-deactivated-users"`
	LicenseToLeastPrivilegedProfileMapping map[string]any `mapstructure:"license-to-least-privileged-profile-mapping"`
	SyncNonStandardUsers bool `mapstructure:"sync-non-standard-users"`
}

func (c* Salesforce) findFieldByTag(tagValue string) (any, bool) {
	v := reflect.ValueOf(c).Elem() // Dereference pointer to struct
	t := v.Type()

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		tag := field.Tag.Get("mapstructure")

		if tag == tagValue {
			return v.Field(i).Interface(), true
		}
	}
	return nil, false
}

func (c *Salesforce) GetStringSlice(fieldName string) []string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return []string{}
	}
	t, ok := v.([]string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Salesforce) GetString(fieldName string) string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return ""
	}
	t, ok := v.(string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Salesforce) GetInt(fieldName string) int {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return 0
	}
	t, ok := v.(int)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Salesforce) GetBool(fieldName string) bool {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return false
	}
	t, ok := v.(bool)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Salesforce) GetStringMap(fieldName string) map[string]any {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return map[string]any{}
	}
	t, ok := v.(map[string]any)
	if !ok {
		panic("wrong type")
	}
	return t
}
